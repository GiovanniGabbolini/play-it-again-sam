from src.interestingness.interestingness_GB import best_interestingness_weights
from src.tfp import algorithms
from src.data.data import preprocessed_dataset_path
from src.knowledge_graph.io import load_sub_graphs_generator
from src.knowledge_graph.segue_type import segue_type
from src.utils.experiments import trunc
from tqdm import tqdm
from random import sample
from collections import defaultdict
import numpy as np
import pandas as pd


def inter_story_diversity(algorithms):
    """Saves a report on the inter story diversity performance of algorithms.

    The inter story diversity is the extent to which algorithms produce different stories, when they start from different seed songs.

    We measure diversity by resorting to Jaccard index on the segue types composing up the stories.
    The result is the percentage of segues of different type in two stories produced with the same songs, but from a different seed.

    Args:
        algorithms (list): functions implementing algorithms for interestingness. It is required to have an 'init' param.
    """
    segues_types = np.load(f"{preprocessed_dataset_path}/tfp/inter_story_diversity/segues_types.npy", allow_pickle=True).item()
    results = {alg.__name__: defaultdict(list) for alg in algorithms}
    for alg in algorithms:
        for t1, t2 in zip(segues_types[alg.__name__]['0'], segues_types[alg.__name__]['1']):
            # Jaccard distance
            diversity = 1-(len(set(t1) & set(t2))/len(set(t1) | set(t2)))

            if len(t1) > 2 and len(t1) <= 10:
                results[alg.__name__]['short_stories'].append(diversity)
            elif len(t1) > 10 and len(t1) <= 25:
                results[alg.__name__]['mid_stories'].append(diversity)
            else:
                results[alg.__name__]['long_stories'].append(diversity)

    df = pd.DataFrame({
        'short_stories': [trunc(np.average(results[alg.__name__]['short_stories']), 2) for alg in algorithms],
        'mid_stories': [trunc(np.average(results[alg.__name__]['mid_stories']), 2) for alg in algorithms],
        'long_stories': [trunc(np.average(results[alg.__name__]['long_stories']), 2) for alg in algorithms],
        'overall': [trunc(np.average(results[alg.__name__]['long_stories']+results[alg.__name__]['mid_stories']+results[alg.__name__]['short_stories']), 2) for alg in algorithms]
    }, index=[alg.__name__ for alg in algorithms])
    df.to_csv(f"{preprocessed_dataset_path}/tfp/inter_story_diversity/results.csv")


def _save(algorithms):
    """Saves a record of the segues types generated by the algorithms where is modified artificially the seed song of the story.

    The seed is set at random twice, and the segues types that every algorithms produces as a result are saved.

    Args:
        algorithms (list): functions implementing algorithms for interestingness. It is required to have an 'init' param.
    """
    d_segues_types = {algorithm.__name__: {} for algorithm in algorithms}
    for playlist_reader in tqdm(load_sub_graphs_generator(f"tfp")):
        songs = playlist_reader()
        for algorithm in algorithms:
            indices = sample(range(len(songs)-1), 2)
            for j in range(len(indices)):

                if algorithm.__name__ == 'random':
                    _, segues = algorithm(songs, best_interestingness_weights())
                else:
                    _, segues = algorithm(songs, best_interestingness_weights(), init=lambda I: I[indices[j]])

                segues_types = [segue_type(s) for s in segues]

                if str(j) not in d_segues_types[algorithm.__name__]:
                    d_segues_types[algorithm.__name__][str(j)] = [segues_types]
                else:
                    d_segues_types[algorithm.__name__][str(j)].append(segues_types)

    try:
        old_segues_types = np.load(f"{preprocessed_dataset_path}/tfp/inter_story_diversity/segues_types.npy", allow_pickle=True).item()
        for a in algorithms:
            old_segues_types[a.__name__] = d_segues_types[a.__name__]
        to_save = old_segues_types
    except Exception:
        to_save = d_segues_types

    np.save(f"{preprocessed_dataset_path}/tfp/inter_story_diversity/segues_types", to_save)


if __name__ == "__main__":
    algos = [random, greedy, greedy_diversity_binary, greedy_diversity,
             greedy_diversity_with_decay_1, greedy_diversity_with_decay_3, greedy_homogeneity, greedy_homogeneity_with_decay_1, greedy_homogeneity_with_decay_3]
    # _save(algos)
    inter_story_diversity(algos)
